@startuml

state AzureIotHub {
    state Idle
    state Started {
        state Connecting
        Connecting : <b>entry/</b> ^CONNECT_REQ
        Connecting : <b>CONNECT_RSP(error)/</b> ^ERROR

        state Connected {
            state Subscribing
            Subscribing : <b>entry/</b> ^MQTT_SUB_REQ(...)
            Subscribing : <b>MQTT_SUB_RSP/</b> if (all_subscribed) ^^SUBSCRIBED else ^MQTT_SUB_REQ(...)
            state Subscribed {
                state Telemetry {
                    state Telemetry_Idle
                    state Telemetry_Sending

                    [*] -> Telemetry_Idle
                    Telemetry_Idle -> Telemetry_Sending : AZ_IOT_SEND_TELEMETRY
                    Telemetry_Sending -> Telemetry_Idle : MQTT_PUB_RSP
                }
                --
                state Methods {
                    state Methods_Idle
                    Methods_Idle : <b>entry/</b> recall;
                    Methods_Idle : <b>AZ_IOT_SEND_METHOD_RESPONSE/</b> defer;

                    state MethodsRequest_Processing
                    MethodsRequest_Processing : <b>entry/</b> start timer; recall
                    MethodsRequest_Processing : <b>AZ_IOT_HUB_METHOD_REQUEST/</b> defer;
                    MethodsRequest_Processing : <b>exit/</b> stop timer

                    state MethodsResponse_Sending
                    MethodsResponse_Sending : <b>entry/</b> MQTT_PUB_REQ(method_response)
                    MethodsResponse_Sending : <b>AZ_IOT_SEND_METHOD_RESPONSE/</b> ^ERROR

                    [*] -> Methods_Idle
                    Methods_Idle -> MethodsRequest_Processing : AZ_IOT_HUB_METHOD_REQUEST
                    MethodsRequest_Processing -> MethodsResponse_Sending : AZ_IOT_SEND_METHOD_RESPONSE, TIMEOUT
                    MethodsResponse_Sending -> Methods_Idle : MQTT_PUB_RSP
                }
                --
                state Twin {
                    state Twin_Get_Idle
                    Twin_Get_Idle : <b>entry/</b> recall
                    Twin_Get_Idle : <b>AZ_IOT_HUB_TWIN_ERROR/</b> ^ERROR

                    state Twin_Get_Sending
                    Twin_Get_Sending : <b>AZ_IOT_SEND_TWIN_GET/</b> defer

                    state Twin_Get_Wait
                    Twin_Get_Wait : <b>AZ_IOT_HUB_TWIN_ERROR/</b> if (shouldRetry) { ^RETRY(delay) } else ^ERROR
                    Twin_Get_Wait : <b>AZ_IOT_SEND_TWIN_GET/</b> defer

                    state Twin_Get_RetryTimeout
                    Twin_Get_RetryTimeout : <b>entry/</b> start twin_timer(delay)
                    Twin_Get_RetryTimeout : <b>AZ_IOT_SEND_TWIN_GET/</b> defer
                    Twin_Get_RetryTimeout : <b>exit/</b> stop twin_timer

                    [*] -> Twin_Get_Idle
                    Twin_Get_Idle -> Twin_Get_Sending : AZ_IOT_SEND_TWIN_GET
                    Twin_Get_Sending -> Twin_Get_Wait : MQTT_PUB_RSP
                    Twin_Get_Wait -> Twin_Get_Idle : AZ_IOT_HUB_TWIN_GET_RESPONSE
                    Twin_Get_Wait --> Twin_Get_RetryTimeout : RETRY
                    Twin_Get_RetryTimeout -> Twin_Get_Sending : TWIN_TIMEOUT

                    ---

                    state Twin_Reported_Idle
                    Twin_Reported_Idle : <b>AZ_IOT_HUB_TWIN_ERROR/</b> ^ERROR

                    state Twin_Reported_Sending

                    [*] -> Twin_Reported_Idle
                    Twin_Reported_Idle -> Twin_Reported_Sending : AZ_IOT_SEND_TWIN_REPORTED
                    Twin_Reported_Sending -> Twin_Reported_Idle : MQTT_PUB_RSP
                }
            }

            ' TODO: Some of the events should be internal to allow defer/recall queues to work:
            Subscribed : <b>MQTT_RECV_IND/</b> MessageParser:
            Subscribed : \t {
            Subscribed : \t\t ^AZ_IOT_HUB_C2D_IND || ^AZ_IOT_HUB_METHOD_REQUEST ||
            Subscribed : \t\t ^AZ_IOT_HUB_TWIN_GET_RESPONSE || ^AZ_IOT_HUB_TWIN_REPORTED_IND || ^AZ_IOT_HUB_TWIN_ERROR
            Subscribed : \t }

            [*] -> Subscribing
            Subscribing --> Subscribed : SUBSCRIBED
        }

        state Disconnecting
        Disconnecting : <b>entry/</b> start timer; ^MQTT_DISCONNECT_REQ
        Disconnecting : <b>exit/</b> stop timer

        [*] -> Connecting
        Connecting --> Connected : CONNECT_RSP(success)
        Connecting --> Disconnecting : AZ_IOT_HUB_STOP
        Connected --> Disconnecting : AZ_IOT_HUB_STOP
    }

    [*] --> Idle
    Idle -> Started : AZ_IOT_HUB_START(endpoint, identity) / ^CONNECT_REQ
    Started --> Idle : MQTT_DISCONNECT_RSP
    Started --> Idle : ERROR, TIMEOUT / ^ERROR
}

@enduml
