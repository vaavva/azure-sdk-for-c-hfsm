@startuml

state MosquittoMQTTClient {

    state Idle
    Idle : <b>entry/</b> _az_mosquitto_init();

    [*] -> Idle
    Idle --> Running : <b>AZ_HFSM_MQTT_EVENT_CONNECT_REQ</b> / _az_mosquitto_connect()

    state Running
    Running : <b>entry/</b> : mosquitto_loop_start();
    Running : <b>exit/</b> : stop timeoutTimer;
    Running : <b>AZ_HFSM_MQTT_EVENT_PUB_REQ/</b> : _az_mosquitto_pub();
    Running : <b>AZ_HFSM_MQTT_EVENT_SUB_REQ/</b> : _az_mosquitto_sub();
    Running : <b>AZ_HFSM_MQTT_EVENT_DISCONNECT_REQ/</b> : _az_mosquitto_disconnect();
    Running : <b>_az_mosqitto_on_connect</b> : ^AZ_HFSM_MQTT_EVENT_CONNECT_RSP;
    Running : <b>_az_mosqitto_on_publish</b> : ^AZ_HFSM_MQTT_EVENT_PUBACK_RSP;
    Running : <b>_az_mosqitto_on_subscribe</b> : ^AZ_HFSM_MQTT_EVENT_SUBACK_RSP;
    Running : <b>_az_mosqitto_on_unsubscribe</b> : az_platform_critical_error();
    Running : <b>_az_mosquitto_on_message</b> : ^AZ_HFSM_MQTT_EVENT_PUB_RECV_IND;

    Running --> Idle : <b>_az_mosqitto_on_disconnect</b> / ^AZ_HFSM_MQTT_EVENT_DISCONNECT_RSP);
    MosquittoMQTTClient : <b>ERROR/</b> az_platform_critical_error(); // PANIC!
}

@enduml
