@startuml

state MqttClient {

    state Disconnected
    [*] --> Disconnected
    Disconnected : <b>DISCONNECT_REQ</b> / ^DISCONNECT_RSP(success)

    state Connecting
    Connecting : <b>entry/</b>
    Connecting : \t start timeoutTimer;
    Connecting : \t mqtt_pal_connect_start();
    Connecting : <b>exit/</b> stop timeoutTimer;

    state Disconnecting
    Disconnecting: <b>entry/</b>
    Disconnecting: \t start timeoutTimer;
    Disconnecting: \t mqtt_pal_disconnect_start();
    Disconnecting: <b>exit/</b> stop timeoutTimer;

    state CriticalError
    CriticalError: <b>entry/</b> assert(); system_reset();

    Disconnected -> Connecting : CONNECT_REQ
    Connecting --> Connected : ON_MQTT_PAL_CONNECTED / ^CONNECT_RSP
    Connecting --> Disconnected : TIMEOUT, FAILED / ^CONNECT_RSP(error)
    Disconnecting --> Disconnected : ON_MQTT_PAL_DISCONNECTED / ^DISCONNECT_RSP(success)
    Connected -> Disconnecting : DISCONNECT_REQ
    Connected --> Disconnected : ON_MQTT_PAL_DISCONNECTED, FAILED, TIMEOUT / ^MQTT_DISCONNECTED(error)
    Disconnecting --> CriticalError : TIMEOUT, FAILED

    ' Note: the following state machine definition does not support MQTT send pipeline
    ' (i.e. sending PUB SUB without waiting for the respective ACKs).
    state Connected {
        Connected : ON_MQTT_PAL_RECV/ ^MQTT_RECV_IND(message)

        state Idle
        Idle : <b>entry/</b> recall;

'TODO: MQTT_PUB/SUB_RSP must be sent on error:

        state PUB_Sending
        PUB_Sending : <b>entry/</b>
        PUB_Sending: \t start timeoutTimer;
        PUB_Sending: \t mqtt_pal_pub_start()
        PUB_Sending : <b>exit/</b> stop timeoutTimer;
        PUB_Sending : <b>MQTT_PUB_REQ, MQTT_SUB_REQ/</b> defer;
        PUB_Sending : <b>ON_MQTT_PAL_PUB_ACK/</b> ^^SENT

        state SUB_Sending
        SUB_Sending : <b>entry/</b>
        SUB_Sending : \t start timeoutTimer;
        SUB_Sending : \t mqtt_pal_sub_start()
        SUB_Sending : <b>exit/</b> stop timeoutTimer;
        SUB_Sending : <b>MQTT_PUB_REQ,</b> MQTT_SUB_REQ/ defer;
        SUB_Sending : <b>ON_MQTT_PAL_SUB_ACK/</b> ^^SENT

        [*] -> Idle

        Idle --> PUB_Sending : MQTT_PUB_REQ
        Idle --> SUB_Sending : MQTT_SUB_REQ
        PUB_Sending -> Idle : SENT / ^MQTT_PUB_RSP(success)
        SUB_Sending -> Idle : SENT/ ^MQTT_SUB_RSP(success)
    }
}

@enduml
